[[plugins]]
repo = 'Shougo/dein.vim'


# バッファ削除でwindowが消えないようにする
[[plugins]]
repo = 'famiu/bufdelete.nvim'


#############################
# Git 
#############################
# Gitメイン
# ステータスバーにブランチ名出すににも使っている
# cf. https://qiita.com/tashua314/items/35521f9bada5fe00cca7
# キーはこちらを参考にした
# cf. https://www.instapaper.com/read/1642598838
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
set diffopt+=vertical

" ビュー系
nnoremap <Leader>gs :tab sp<CR>:Git<CR>:only<CR>
nnoremap <leader>gb :Git blame<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>gd :Gvdiffsplit<CR>
" history 当時のファイル遡れるので使いやすい
nnoremap <leader>gh :tab sp<CR>:0Gclog<CR>

" 操作系(add, commit, push)
nnoremap <Leader>ga :Gwrite<CR>
" status画面からccでやるのであまり使わないが
nnoremap <Leader>gC :Git commit -v<CR>
nnoremap <leader>gP :call GitPushCurrentBranch()<CR>
nnoremap <leader>gB :call GitMakeBranchAndMove()<CR>

" 同名のブランチへpush
" cf. https://izumisy.work/entry/2021/08/23/160738
function! GitPushCurrentBranch()
  let branch = trim(system('git branch --show-current'))
  let exec = ":Git push origin " . branch
  call ConfirmActionAndExec(exec)
endfunction

" ブランチ作成
function! GitMakeBranchAndMove()
  let branch = input('branch name: ')
  let exec = ":Git checkout -b  " . branch
  "call ConfirmActionAndExec(exec)
  execute exec
endfunction

" URLを取得する
" .vimrc に追加してください！
function! s:GetGitUrl() abort
  " Git URLを取得します
  let l:git_url = system('git config --get remote.origin.url')
  
  if v:shell_error != 0

    echohl ErrorMsg
    echo 'Git URLの取得に失敗しちゃいました...'
    echohl None
    return
  endif
  
  " URLの変換処理
  " .gitと改行を削除
  let l:git_url = substitute(l:git_url, '\.git\n\?$', '', '')
  " SSH形式をHTTPS形式に変換
  let l:git_url = substitute(l:git_url, '^git@github\.com:', 'https://github.com/', '')
  
  " 現在のブランチ名を取得
  let l:current_branch = system('git rev-parse --abbrev-ref HEAD')

  let l:current_branch = substitute(l:current_branch, '\n\?$', '', '')
  
  " 結果を表示！
echo '=== Repository URL ==='
  echo l:git_url
  echo ''
  echo '=== Compare URL ==='
  echo l:git_url . '/compare/develop...' . l:current_branch
endfunction

" コマンドとして登録
command! GitUrl call s:GetGitUrl()

" キーマッピングの設定例
nnoremap <Leader>gu :GitUrl<CR>
'''

# コミットブラウザ
[[plugins]]
repo = 'rbong/vim-flog'
hook_add = '''
" main画面(tigのmainの意図)
nnoremap <leader>gv :Flog<CR>
" 特定のファイルで(only)
nnoremap <leader>go :Flog -path=%<CR>

" 同じ操作感でtigも開く
nnoremap <leader>tv :terminal tig<CR>
nnoremap <leader>to :terminal tig %<CR>
nnoremap <leader>tb :terminal tig blame %<CR>
nnoremap <leader>ts :terminal tig status<CR>
'''


# gitのdiffを表示したり、hunkを使いやすくする
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
" キーをいったん削除
let g:gitgutter_map_keys = 0
"" git操作
nnoremap <Leader>h[ <Plug>(GitGutterPrevHunk)
nnoremap <Leader>h] <Plug>(GitGutterNextHunk)
nnoremap <Leader>hh :GitGutterLineHighlightsToggle<CR>
nnoremap <Leader>hs <Plug>(GitGutterStageHunk)
nnoremap <Leader>hu <Plug>(GitGutterUndoHunk)
nnoremap <Leader>hp <Plug>(GitGutterPreviewHunk)

" 色変更
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=blue
highlight GitGutterDelete ctermfg=red

"" 反映時間を短くする(デフォルトは4000ms)
set updatetime=250
'''

# cf. https://qiita.com/yuyuchu3333/items/20a0acfe7e0d0e167ccc
[[plugins]] # ステータスバー
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'gitstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'MyFugitiveHead',
      \   'gitstatus': 'GitStatus',
      \ },
      \ }

function! MyFugitiveHead()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*FugitiveHead')
      let _ = FugitiveHead()
      let gg = "\<Char-0xe0a0> "
      return strlen(_) ? gg._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! GitStatus()
  let [a,m,r] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', a, m, r)
endfunction
'''

[[plugins]] # deniteに必要
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]] # deniteに必要
repo = 'Shougo/neomru.vim'

[[plugins]] # tomlを表示
repo  = 'cespare/vim-toml'

[[plugins]] # color scheme
repo = 'jacoborus/tender'
hook_add = '''
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  " au MyAutoCmd VimEnter * nested colorscheme tender

  " 背景透過
  augroup TransparentBG
    autocmd!
	autocmd Colorscheme * highlight Normal ctermbg=none
	autocmd Colorscheme * highlight NonText ctermbg=none
	autocmd Colorscheme * highlight LineNr ctermbg=none
	autocmd Colorscheme * highlight Folded ctermbg=none
	autocmd Colorscheme * highlight EndOfBuffer ctermbg=none 
  augroup END
  colorscheme tender
'''

[[plugins]] # easymotion
repo = 'easymotion/vim-easymotion'

[[plugins]] # copilot
repo = 'github/copilot.vim'
hook_add = '''
   let g:copilot_node_command = '~/.nodebrew/node/v16.10.0/bin/node'
'''

[[plugins]]
repo = 'junegunn/fzf'
hook_post_update = './install --all'
merged = 0


[[plugins]]
repo = 'junegunn/fzf.vim'
on_cmd = [
    'Files',
    'ProjectFiles',
    'Buffers',
    'BLines',
    'History',
    'Tags',
    'BTags',
    'GFiles',
    'Ag',
]
hook_add = '''
"let $FZF_DEFAULT_OPTS="--layout=reverse"
let $FZF_DEFAULT_COMMAND="rg --files --hidden --glob !.git/** --color always "
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.9, 'height': 0.9,'yoffset':0.5,'xoffset': 0.5 } }
"let g:fzf_layout = { 'down': '~40%' }
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" Project全体
command! ProjectFiles execute 'GFiles' systemlist('git rev-parse --show-toplevel')[0]
"command! ProjectFiles execute 'GFiles' s:get_git_root()

" Projectのgrep
command! -bang -nargs=* ProjectGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.fzf#shellescape(<q-args>),
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

" Projectのhistory
command! -bang ProjectHistory call fzf#run(fzf#wrap(s:preview(<bang>0, {
  \ 'source': s:file_history_from_directory(s:get_git_root()),
  \ 'options': [
  \   '--prompt', 'ProjectHistory> ',
  \   '--multi',
  \ ]}), <bang>0))

" カレント以下のhistory
command! -bang CwdHistory call fzf#run(fzf#wrap(s:preview(<bang>0, {
  \ 'source': s:file_history_from_directory(getcwd()),
  \ 'options': [
  \   '--prompt', 'CwdHistory> ',
  \   '--multi',
  \ ]}), <bang>0))

" Projectのよく使うもの(バッファ,最近使ったファイル,プロジェクト内のファイル)
command! -bang ProjectUsefulFiles call fzf#run(fzf#wrap(s:preview(<bang>0, {
  \ 'source': s:useful_files(s:get_git_root()),
  \ 'options': [
  \   '--prompt', 'ProjectUsefulFiles> ',
  \   '--multi',
  \ ]}), <bang>0))

function! s:useful_files(directory)
  let buffer = s:get_file_buffer_list()
  let history = s:file_history_from_directory(a:directory)
  let files_all = split(globpath(a:directory, '*'), "\n")

  if system('git rev-parse --is-inside-work-tree') == "true\n"
    let buffer2 = filter(copy(buffer), 'index(files_all, v:val) != -1')
    "let history2 = filter(copy(history), 'index(files_all, v:val) != -1')
    let files_git = split(system('git ls-files'), "\n")
    return fzf#vim#_uniq(buffer2 + history + files_git)
  else
    return fzf#vim#_uniq(buffer + history + files_all)
  endif

endfunction

function! s:file_history_from_directory(directory)
  return fzf#vim#_uniq(filter(fzf#vim#_recent_files(), "s:file_is_in_directory(fnamemodify(v:val, ':p'), a:directory)"))
endfunction

function! s:file_is_in_directory(file, directory)
  return filereadable(a:file) && match(a:file, a:directory . '/') == 0
endfunction

function! s:preview(bang, ...)
  let preview_window = get(g:, 'fzf_preview_window', a:bang && &columns >= 80 || &columns >= 120 ? 'right': '')
  if len(preview_window)
    return call('fzf#vim#with_preview', add(copy(a:000), preview_window))
  endif
  return {}
endfunction

function! s:get_git_root()
  let root = split(system('git rev-parse --show-toplevel'), '\n')[0]
  return v:shell_error ? '' : root
endfunction

function! s:get_file_buffer_list()
  return filter(map(range(1, bufnr('$')), 'bufname(v:val)'), 'v:val != ""')
endfunction

""""""""""""""""
" キーバインド
""""""""""""""""
" よく使う全部乗せ
nnoremap <silent> <C-B> :ProjectUsefulFiles<CR>
inoremap <silent> <C-B> <ESC>:ProjectUsefulFiles<CR>

" プロジェクト内のファイル
nnoremap <silent> <C-P> :ProjectFiles<CR>

"バッファ一覧
" nnoremap <Leader>fb :FzfPreviewBuffersRpc<CR>

" AG
nnoremap <Leader>fg :ProjectGrep<Space>


" ノートの一覧
command! Nlist execute 'Files ~/notes'

 " ノートの検索
command! -bang -nargs=* Ngrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.fzf#shellescape(''),
  \   fzf#vim#with_preview({'dir': '~/notes/'}), <bang>0)

" ノート作成
command! Nadd :term notesadd

" メモ作成
command! -nargs=? Nmemo call Nmemo(<f-args>)
function! Nmemo(...)
  if a:0 >= 1
     exe("term notesmemo " . a:1)
  else
    :term notesmemo
  endif
endfunction

" 今日の日記作成
command! Ndiary :term notesdiary

" TODO検索
command! Ntodo :Denite grep:::'\[\s\]'



"command! -nargs=? Ngrep call Ngrep(<f-args>)
" function! Ngrep(...)
"   if a:0 >= 1
"     if a:1 == 'memo'
"       call fzf#vim#grep(
"       \ 'git grep --line-number -- '.fzf#shellescape('memo'),
"       \ fzf#vim#with_preview({'dir': '~/notes/'}), 0)
"     endif
"     if a:1 == 'clients'
"       call fzf#vim#grep(
"       \ 'git grep --line-number -- '.fzf#shellescape(''),
"       \ fzf#vim#with_preview({'dir': '~/notes/clients/'}), 0)
"     endif
"   else
"       call fzf#vim#grep(
"       \ 'git grep --line-number -- '.fzf#shellescape(''),
"       \ fzf#vim#with_preview({'dir': '~/notes/'}), 0)
"   endif
" endfunction


"""""""" ここから実験 """"""""
" cf. https://gist.github.com/danmikita/d855174385b3059cd6bc399ad799555e

let s:files_status = {}

function! s:cacheGitStatus()
  let l:gitcmd = 'git -c color.status=false -C ' . $PWD . ' status -s'
  let l:statusesStr = system(l:gitcmd)
  let l:statusesSplit = split(l:statusesStr, '\n')
  for l:statusLine in l:statusesSplit
    let l:fileStatus = split(l:statusLine, ' ')[0]
    let l:fileName = split(l:statusLine, ' ')[1]
    let s:files_status[l:fileName] = l:fileStatus
  endfor
endfunction

function! s:prepend_indicators(candidates)
  return s:prepend_git_status(a:candidates)
endfunction

  function! s:prepend_git_status(candidates)
    let l:result = []
    for l:candidate in a:candidates
      let l:status = ''
      "let l:icon = split(l:candidate, ' ')[0]
      let l:filePathWithIcon = split(l:candidate, ' ')[0]

      let l:pos = strridx(l:filePathWithIcon, ' ')
      let l:file_path = l:filePathWithIcon[pos+1:-1]
      if has_key(s:files_status, l:file_path)
        let l:status = s:files_status[l:file_path]
        call add(l:result, printf('%s %s', l:status, l:file_path))
      else
        " printf statement contains a load-bearing unicode space
        " the file path is extracted from the list item using {3..-1},
        " this breaks if there is a different number of spaces, which
        " means if we add a space in the following printf it breaks.
        " using a unicode space preserves the spacing in the fzf list
        " without breaking the {3..-1} index
        call add(l:result, printf('%s %s', ' ', l:file_path))
      endif
    endfor

    return l:result
  endfunction

  function! s:edit_file(lines)
    if len(a:lines) < 2 | return | endif

    let l:cmd = get({'ctrl-x': 'split',
                 \ 'ctrl-v': 'vertical split',
                 \ 'ctrl-t': 'tabe'}, a:lines[0], 'e')

    for l:item in a:lines[1:]
      let l:pos = strridx(l:item, ' ')
      let l:file_path = l:item[pos+1:-1]
      execute 'silent '. l:cmd . ' ' . l:file_path
    endfor
  endfunction
'''


[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#default_hidden=1
let hide_dirs  = '^\%(\.git\|node_modules\|__pycache__\)$'  " here you write the dir names 
let hide_files = '\%(\.byebug\|\.ruby-\)\+'    " here you write the file names
let g:fern#default_exclude = hide_dirs . '\|' . hide_files  " here you exclude them
" Show file tree with Ctrl+n
nnoremap nt :Fern . -reveal=% -drawer -toggle -width=40<CR>
function! s:init_fern() abort
  nmap <buffer> <Plug>(fern-action-trash) <Plug>(fern-action-remove)

  nmap <buffer><expr>
      \ <Plug>(fern-my-expand-or-collapse)
      \ fern#smart#leaf(
      \   "\<Plug>(fern-action-collapse)",
      \   "\<Plug>(fern-action-expand)",
      \   "\<Plug>(fern-action-collapse)",
      \ )
  nmap <buffer><nowait> <Leader> <Plug>(fern-action-open-or-expand)
  nmap <buffer><nowait> <CR> <Plug>(fern-action-open-or-expand)
  nmap <buffer><nowait> <C-l> <Plug>(fern-action-open-or-enter)

endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'


[[plugins]]
repo = 'LumaKernel/fern-mapping-reload-all.vim'
depends = ['fern.vim']
hook_add = '''
function s:init_fern_mapping_reload_all()
    nmap <buffer> r <Plug>(fern-action-reload:all)
endfunction
augroup my-fern-mapping-reload-all
    autocmd! *
    autocmd FileType fern call s:init_fern_mapping_reload_all()
augroup END
'''


[[plugins]] # Indent Guides
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors=0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=234
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=236
'''

#[[plugins]]
#repo = 'lambdalisue/nerdfont.vim'

#[[plugins]]
#repo = 'lambdalisue/fern-renderer-nerdfont.vim'
#hook_add = '''
#  let g:fern#renderer = 'nerdfont'
#'''
#[[plugins]]
#repo = 'lambdalisue/glyph-palette.vim'
#hook_add = '''
#  augroup my-glyph-palette
#    autocmd! *
#    autocmd FileType fern call glyph_palette#apply()
#    autocmd FileType nerdtree,startify call glyph_palette#apply()
#  augroup END
#'''


[[plugins]]
repo = 'ap/vim-buftabline'
hook_add = '''
let g:buftabline_numbers = 2
" デフォルトの黄色のほうが見やすかったのでコメントアウト
"highlight BufTabLineCurrent guifg=#d4d4d9 ctermfg=188 guibg=#89898c ctermbg=240 gui=NONE cterm=NONE
"highlight BufTabLineActive guifg=#afafb2 ctermfg=145 guibg=#3e3e40 ctermbg=236 gui=NONE cterm=NONE
"highlight BufTabLineHidden guifg=#89898c ctermfg=245 guibg=#3e3e40 ctermbg=236 gui=NONE cterm=NONE
"highlight BufTabLineFill guifg=NONE ctermfg=NONE guibg=#252527 ctermbg=235 gui=NONE cterm=NONE

nnoremap <C-l> :bnext<CR>
nnoremap <C-h> :bprev<CR>
nnoremap <Leader>x :bd<CR>
nmap <Leader>1 <Plug>BufTabLine.Go(1)
nmap <Leader>2 <Plug>BufTabLine.Go(2)
nmap <Leader>3 <Plug>BufTabLine.Go(3)
nmap <Leader>4 <Plug>BufTabLine.Go(4)
nmap <Leader>5 <Plug>BufTabLine.Go(5)
nmap <Leader>6 <Plug>BufTabLine.Go(6)
nmap <Leader>7 <Plug>BufTabLine.Go(7)
nmap <Leader>8 <Plug>BufTabLine.Go(8)
nmap <Leader>9 <Plug>BufTabLine.Go(9)
nmap <Leader>0 <Plug>BufTabLine.Go(0)
'''

#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
#rev = 'next'
#build = 'bash install.sh'
#hook_add = '''
#    let g:LanguageClient_serverCommands = {
#        \ 'python': ['pyls'],
#    \ }
#    let g:LanguageClient_useVirtualText = 0
#    augroup LanguageClient_config
#        autocmd!
#        autocmd User LanguageClientStarted setlocal signcolumn=yes
#        autocmd User LanguageClientStopped setlocal signcolumn=auto
#    augroup END
#'''

[[plugins]]
repo = "neoclide/coc.nvim"
merge = 0
rev = "release"
hook_add = """
    set statusline^=%{coc#status()}
    let g:coc_global_extensions = [
      \ 'coc-jedi',
      \ 'coc-diagnostic',
      \ 'coc-json',
      \ 'coc-tsserver',
      \ ]

      inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction
"""

[[plugins]] # :%S で/perl風正規表現
repo = 'othree/eregex.vim'

[[plugins]]
repo = 'mattn/vim-sonictemplate'
hook_add = """
let g:sonictemplate_vim_template_dir = '$HOME/.config/nvim/template'

" Notesのリンク作成
autocmd FileType markdown nnoremap <buffer> <Leader>ni :Template notes-link<CR>
" Notesのデフォルト作成
autocmd FileType markdown nnoremap <buffer> <Leader>np :Template notes<CR>
"""

[[plugins]]
repo = 'ixru/nvim-markdown'
hook_add = """
    let g:vim_markdown_folding_disabled = 1
    " リンクを別窓で開きたいのだけど効いてなさそう
    let g:vim_markdown_edit_url_in = 'vsplit'
    
    " 自分でリマップする
    let g:vim_markdown_no_default_key_mappings = 1

    autocmd FileType markdown nnoremap <buffer> ]] <Plug>Markdown_MoveToNextHeader
    autocmd FileType markdown vnoremap <buffer> ]] <Plug>Markdown_MoveToNextHeader
    autocmd FileType markdown nnoremap <buffer> [[ <Plug>Markdown_MoveToPreviousHeader
    autocmd FileType markdown vnoremap <buffer> [[ <Plug>Markdown_MoveToPreviousHeader
    autocmd FileType markdown nnoremap <buffer> ][ <Plug>Markdown_MoveToNextSiblingHeader
    autocmd FileType markdown vnoremap <buffer> ][ <Plug>Markdown_MoveToNextSiblingHeader
    autocmd FileType markdown nnoremap <buffer> ]u <Plug>Markdown_MoveToParentHeader
    autocmd FileType markdown vnoremap <buffer> ]u <Plug>Markdown_MoveToParentHeader
    autocmd FileType markdown nnoremap <buffer> ]c <Plug>Markdown_MoveToCurHeader
    autocmd FileType markdown vnoremap <buffer> ]c <Plug>Markdown_MoveToCurHeader

    autocmd FileType markdown nnoremap <buffer> <Leader>x <Plug>Markdown_Checkbox

    autocmd FileType markdown inoremap <buffer> <C-k> <Plug>Markdown_CreateLink
    autocmd FileType markdown vnoremap <buffer> <C-k> <Plug>Markdown_CreateLink

    autocmd FileType markdown nnoremap <buffer> <CR> <Plug>Markdown_FollowLink

    autocmd FileType markdown nnoremap <buffer> o <Plug>Markdown_NewLineBelow
    autocmd FileType markdown nnoremap <buffer> O <Plug>Markdown_NewLineAbove
    autocmd FileType markdown inoremap <buffer> <CR> <Plug>Markdown_NewLineBelow

    " このプラグインのTABは切った。
    " このプラグインには関係無いが、バレットの行はtabでインデントしたい
    " バレット以外の行ではそのままタブを入れる
    autocmd FileType markdown inoremap <buffer> <expr> <TAB> IndentWithTab(1)
    autocmd FileType markdown inoremap <buffer> <expr> <S-TAB> IndentWithTab(-1)
    autocmd FileType markdown nnoremap <buffer> <TAB> >>
    autocmd FileType markdown nnoremap <buffer> <S-TAB> <<
    autocmd FileType markdown vnoremap <buffer> <TAB> >>
    autocmd FileType markdown vnoremap <buffer> <S-TAB> <<

    function! IndentWithTab(arrow) abort
      let l = getline('.')
      if l =~ '^\s*[\-\+\*]'
        if a:arrow > 0
          return "\<C-T>"
        else
          return "\<C-D>"
        endif
      else
        return "\<Tab>"
      end
    endfunction


    " ファイルを順番に開きたい
    " diaryのmdを眺めるときとかに便利
    function! OpenRelativeFileInDirectory(direction)
      " 現在開いているファイルのフルパスを取得
      let current_file = expand('%:p')
      " ディレクトリのパスを取得
      let dir = expand('%:p:h')
      " ディレクトリ内のすべてのファイルを取得（隠しファイルを除く）
      let files = sort(globpath(dir, '*', 0, 1))

      if a:direction == 'latest'
        if len(files) <= 0
          echo "No newer files found"
          return
        endif
        execute 'edit ' . fnameescape(files[len(files)-1])
        return
      endif

      " 現在開いているファイルのインデックスを見つける
      let index = index(files, current_file)
      " ファイルが見つからない場合は終了
      if index == -1
        echo "Current file not found in directory"
        return
      endif

      " 次、または前のファイルを開く
      let new_index = index + a:direction
      if new_index < 0 || new_index >= len(files)
        echo "No more files in that direction"
        return
      endif

      execute 'edit ' . fnameescape(files[new_index])
    endfunction

    command! -nargs=1 OpenRelativeFileInDirectory call OpenRelativeFileInDirectory(<args>)
    autocmd FileType markdown nnoremap <silent> <C-Up> :OpenRelativeFileInDirectory 1<CR>
    autocmd FileType markdown nnoremap <silent> <C-Down> :OpenRelativeFileInDirectory -1<CR>
    autocmd FileType markdown nnoremap <silent> <C-PageUp> :OpenRelativeFileInDirectory 'latest'<CR>
"""


[[plugins]] # :TableModeToggle
repo = 'dhruvasagar/vim-table-mode'

#[[plugins]]
#repo = 'yasunori/nvim-follow-markdown-links'
#hook_add = """
#    command! FollowMarkdownLink call FollowMarkdownLink(0)
#    command! FollowMarkdownLinkWithNewWindow call FollowMarkdownLink(1)
#    command! PreviousMarkdownBuffer call PreviousMarkdownBuffer()
#    autocmd FileType markdown nnoremap <script> <[-CR> :FollowMarkdownLink<CR>
#    autocmd FileType markdown nnoremap <script> <CR> :FollowMarkdownLinkWithNewWindow<CR>
#    autocmd FileType markdown nnoremap <script> <BS> :PreviousMarkdownBuffer<CR>
#    let g:follow_markdown_links#extensions = ['.md', '.markdown']
#"""


#[[plugins]] # markdownのlinkをうまいことするやつ
#repo = 'alexpearce/nvim-follow-markdown-links'
#hook_add = """
#    command! FollowMarkdownLink call FollowMarkdownLink()
#    command! PreviousMarkdownBuffer call PreviousMarkdownBuffer()
#    autocmd FileType markdown nnoremap <script> <CR> :FollowMarkdownLink<CR>
#    autocmd FileType markdown nnoremap <script> <BS> :PreviousMarkdownBuffer<CR>
#    let g:follow_markdown_links#extensions = ['.md', '.markdown']
#"""

[[plugins]] # :PreviewMarkdown
repo = 'skanehira/preview-markdown.vim'
hook_add = """
    let g:preview_markdown_parser='glow'
    command! PrevMD :PreviewMarkdown right
"""

[[plugins]]
# Term とか VTerm とかで terminal を開くのに使う
repo = 'vimlab/split-term.vim'
hook_add = """
    set splitright
    set splitbelow
    let g:split_term_default_shell = "zsh"
    let g:disable_key_mappings="<ESC>"
"""
