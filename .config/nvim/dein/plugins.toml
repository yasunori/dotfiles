[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {'colorscheme': 'wombat'}
'''

# vimproc
# denite依存
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# neomru
# denite依存
[[plugins]]
repo = 'Shougo/neomru.vim'


# Toml
[[plugins]]
repo  = 'cespare/vim-toml'

# Color Scheme
[[plugins]]
repo = 'jacoborus/tender.vim'

# Denite
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    "ESCキーでdeniteを終了
    "call denite#custom#map('insert', '<esc>', '<denite:enter_mode:normal>', 'noremap')
    "call denite#custom#map('normal', '<esc>', '<denite:quit>', 'noremap')

    "一番利用する、最近使ったファイル
    noremap <C-B> :Denite buffer file_mru<CR>
    inoremap <C-B> <ESC>:Denite buffer file_mru<CR>

    "バッファ一覧
    noremap <,ub> :Denite buffer<CR>

    "最近使ったファイルの一覧
    noremap <,um> :Denite buffer<CR>

    "カレントディレクトリ
    noremap <,uf> :DeniteBufferDir file_rec<CR>

    "バッファ一覧
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
      nnoremap <silent><buffer><expr> <CR>
      \ denite#do_map('do_action')
      nnoremap <silent><buffer><expr> p
      \ denite#do_map('do_action', 'preview')
      nnoremap <silent><buffer><expr> <esc>
      \ denite#do_map('quit')
      nnoremap <silent><buffer><expr> i
      \ denite#do_map('open_filter_buffer')
      nnoremap <silent><buffer><expr> <Space>
      \ denite#do_map('toggle_select').'j'
    endfunction

'''

# NerdTree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    noremap nt :NERDTreeToggle<CR>
    let file_name = expand("%")
    if has('vim_starting') &&  file_name == ""
        autocmd VimEnter * NERDTree ./
    endif
	let NERDTreeShowHidden = 1
    let g:NERDTreeWinSize=26
'''

# Indent Guides
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors=0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=234
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=236
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
    let g:LanguageClient_serverCommands = {
        \ 'python': ['pyls'],
    \ }
'''

[[plugins]]
repo     = 'w0rp/ale'
hook_add = '''
"let g:ale_sign_error = '>>'
"let g:ale_sign_warning = '--'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 1

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 1
" ファイルを保存したときにlint実行
let g:ale_lint_on_save = 1
" 編集中のlintはしない
"let g:ale_lint_on_text_changed = 'never'

" lint結果をロケーションリストとQuickFixには表示しない
" 出てると結構うざいしQuickFixを書き換えられるのは困る
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
" 有効にするlinter
let g:ale_linters = {
\   'python': ['flake8'],
\}
'''

[[plugins]]
repo = 'othree/eregex.vim'


# Golang
#[[plugins]]
#repo = 'fatih/vim-go'
